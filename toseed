#!/usr/bin/env python
from mnemonic.mnemonic import Mnemonic
import sys
from binascii import hexlify, unhexlify
from pycoin.key.BIP32Node import BIP32Node
from pycoin.networks import full_network_name_for_netcode, network_name_for_netcode, NETWORK_NAMES
from getpass import getpass

# ./toseed 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about' TREZOR
# > seed c55257c360c07c72029aebc1b53c05ed0362ada38ead3e3e9efa3708e53495531f09a6987599d18264c1e1c92f2cf141630c7a3c4ab7c81b2f001698e7463b04
# ku H:$SEED
# > master xprv9s21ZrQH143K3h3fDYiay8mocZ3afhfULfb5GX8kCBdno77K4HiA15Tg23wpbeF1pLfs1c5SPmYHrEpTuuRhxMwvKDwqdKiGJS9XFKzUsAF
# ku -s "44'/0'/0'/0/0" H:$SEED
# > 1PEha8dk5Me5J1rZWpgqSt5F4BroTBLS5y

doPrivate = True
passphrase = sys.argv[2] if len(sys.argv) > 2 else getpass('Passphrase: ')
seed = Mnemonic.to_seed(sys.argv[1], passphrase=passphrase)
if doPrivate:
    print hexlify(seed)
master = BIP32Node.from_master_secret(seed)
for i in xrange(20):
    subkey = master.subkeys("44'/0'/0'/0/%d"%(i)).next()
    if doPrivate:
        print "%s %s"%(subkey.address(), subkey.wif())
    else:
        print "%s"%(subkey.address())
